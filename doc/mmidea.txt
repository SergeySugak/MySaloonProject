MySaloon Project
Приложение для администирирования салона, предоставляющего услуги мастеров. Например, парикмахерская.
Использует Firebase в качестве backend-а.
Администратор регистрирует работников, предоставляемые ими услуги и ведет учет рабочего времении.
Клиенты (используя клиентское приложение) регистрируются к мастеру на дату и время, таким образом автоматизируя процесс записи.


1. Для ускорения сборки наше всё это пакеты '*_фабрика + *_api + *_impl.
impl - это даггеровский компонент, реализующий api.
А фабрика порождает даггеровский компонент или предоставляет его builder.
При этом компонент этот предоставляется другим компонентам, как зависимость.
Тогда *_api может в build.gradle прописываться не как implementation, а как api.
См. https://habr.com/ru/company/yandex/blog/419295/

2. Компонент верхнего уровня (MainComponent / AppComponent) является даггеровским @Component-ом.
Он реализует интерфейсы, которые являются зависимостями компонентов нижнего уровня (компоненты активитей, фрагментов,..)
Таким образом через реализацию провайдит сущности потребные на нижних уровнях.
Он записывает порожденные экземпляры зависимосей в map, используя MultiBinding.
Эту map он сохраняет либо в App, либо в activity (либо еще в каком-либо контейнере - это надо реализовать),
который реализует интерфейс HasComponentDependencies.
Компонент нижнего уровня определяет api, в котором определяет интерфейс, который будет реализовывать компонент верхнего уровня.
Компонент нижнего уровня прописывает зависимости в @Component(dependencies=[...]).
Потом в inject-е надо вызывать создание этой зависимости и вызвать findComponentDependencies(), которая найдет map,
созданный компонентом верхнего уровня, а сам inject засунет зависимости именно для вызывающего компонента.
Например:
DaggerStartScreenComponent.builder()
                .startScreenDependencies(findComponentDependencies())
                .timelogicComponent(createTimelogicComponent())
                .build()
                .inject(this)